NAME =yuseong
EXTENSION =.exe
OUTPUT =$(NAME)$(EXTENSION)

SRC_DIR =src
BUILD_DIR =build
OBJ_DIR =$(BUILD_DIR)/obj
OBJ =obj

GLSLC =glslc
CC =clang
CPP =clang++

CCJSON =compile_commands.json

JASB =jasb.exe
JASB_FILE =jasb.c
JASB_CMD = *.o.json
JASB_LIB =-luser32

GLFW3 =
TESTING =

INCLUDE_DIRS =-Isrc -Isrc/core -IC:/VulkanSDK/1.3.275.0/Include
INCLUDE_DIRS +=-IC:\Lib\tracy-0.11.1\public -IC:\Lib\tracy-0.11.1\public\tracy
INCLUDE_DIRS +=-IC:\Lib\glfw\include
INCLUDE_DIRS +=-Isrc/renderer/opengl

LIBS =-lshell32 -lgdi32 -lwinmm -luser32 -lvulkan-1 -lopengl32
LIBS +=-lglfw3_mt
LIBS +=-ld3dcompiler -ld3d11 -ldxgi -ldxguid

LIB_PATH =-LC:/VulkanSDK/1.3.275.0/Lib
LIB_PATH +=-LC:\Lib\glfw\lib-vc2022

ifdef CPP_USE
	CFLAGS =
endif
# CFLAGS +=-std=c23
ifndef CPP_USE
	CFLAGS =-Wall -Wextra -Werror
endif

CFLAGS +=-fno-inline -fno-omit-frame-pointer
CFLAGS +=-Wno-missing-field-initializers -Wno-unused-but-set-variable
CFLAGS +=-Wno-uninitialized
CFLAGS +=-DPLATFORM_WINDOWS

ifdef TESTING
	CFLAGS +=-DTESTING
endif

ifdef RELEASE_USE
	CFLAGS +=-Wvarargs -O3
	CFLAGS +=-D_RELEASE -DRELEASE -DYURELEASE
endif

ifndef RELEASE_USE
	CFLAGS +=-g3 -Wvarargs -O0
	CFLAGS +=-D_DEBUG -DDEBUG
endif

ifdef ASAN_USE
	CFLAGS +=-fsanitize=address
endif

ifdef TRACY_USE
	CFLAGS +=-DTRACY_ENABLE

	CPPFLAGS +=-DTRACY_ENABLE
	CPPFLAGS =-Wno-format
	CPP_FILES =$(wildcard $(SRC_DIR)/*.cpp)
	CPP_OBJS =$(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(CPP_FILES))
endif

ifdef CPP_USE
	CC =clang++
	CPP += CFLAGS
endif

MYFIND =C:\msys64\usr\bin\find.exe

FILES =$(shell $(MYFIND) $(SRC_DIR) -type f -name '*.c')
OBJS =$(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(FILES))

SHADER_DIR =$(SRC_DIR)/shaders
SHADER_FILES =$(shell $(MYFIND) $(SRC_DIR) -type f -name '*.comp')
SHADER_OBJS =$(patsubst $(SRC_DIR)/%.comp, $(OBJ_DIR)/%.comp.spv, $(SHADER_FILES))

all: $(OBJ_DIR) $(BUILD_DIR)/$(OUTPUT) $(CCJSON) $(SHADER_OBJS)

$(BUILD_DIR)/$(JASB): $(JASB_FILE)
	@$(CC) $(JASBFLAGS) -o $@ $^ $(JASB_LIB)

$(BUILD_DIR)/$(OUTPUT): $(OBJS) $(CPP_OBJS)
	$(CC) $(CFLAGS) -o $@ $^ $(INCLUDE_DIRS) $(LIB_PATH) $(LIBS)

$(OBJ_DIR)/%.comp.spv: $(SRC_DIR)/%.comp
	@mkdir -p $(dir $@)
	@$(GLSLC) $< -o $@
	@echo Compiled shaders

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(dir $@)
	$(CPP) $(CPPFLAGS) -c $< -o $@ $(INCLUDE_DIRS)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDE_DIRS)

$(BUILD_DIR)/$(OBJ):
	@mkdir -p build/obj

$(CCJSON): $(OBJS) $(BUILD_DIR)/$(JASB)
	@echo Updating compile_commands.json
	@$(BUILD_DIR)/$(JASB) $(JASB_CMD)

clean:
	@echo Deleting files..
	@rm -rf $(OBJ_DIR)
	@rm -f $(BUILD_DIR)/$(NAME)$(EXTENSION)
	@rm -f $(BUILD_DIR)/$(NAME).pdb
	@rm -f $(BUILD_DIR)/$(NAME).exp
	@rm -f $(BUILD_DIR)/$(NAME).lib
	@rm -f $(BUILD_DIR)/$(NAME).rdi
	@rm -f $(BUILD_DIR)/*.ilk
	@rm -f $(BUILD_DIR)/vc140.pdb
	@rm -f $(BUILD_DIR)/*.obj

fclean: clean
	rm -f compile_commands.json

re: clean
	@make --no-print-directory -f Makefile.win32 -j24 all

.PHONY: all clean re
